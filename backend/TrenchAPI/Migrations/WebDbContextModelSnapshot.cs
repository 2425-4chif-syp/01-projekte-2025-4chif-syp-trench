// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TrenchAPI.Context;

#nullable disable

namespace TrenchAPI.Migrations
{
    [DbContext(typeof(WebDbContext))]
    partial class WebDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TrenchAPI.Models.Gesamtmessung", b =>
                {
                    b.Property<int>("GesamtmessungID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GesamtmessungID"));

                    b.Property<decimal>("GesamtVektor")
                        .HasColumnType("decimal(8,3)");

                    b.Property<int>("SpuleID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Zeit")
                        .HasColumnType("timestamp");

                    b.HasKey("GesamtmessungID");

                    b.HasIndex("SpuleID");

                    b.ToTable("Gesamtmessung");
                });

            modelBuilder.Entity("TrenchAPI.Models.Messeinstellung", b =>
                {
                    b.Property<int>("MesseinstellungID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MesseinstellungID"));

                    b.Property<decimal>("Bemessungsfrequenz")
                        .HasColumnType("decimal(8,3)");

                    b.Property<decimal>("Bemessungsspannung")
                        .HasColumnType("decimal(8,3)");

                    b.Property<int>("GesamtmessungID")
                        .HasColumnType("int");

                    b.Property<int>("Sensoren")
                        .HasColumnType("int");

                    b.Property<int>("Toleranz")
                        .HasColumnType("int");

                    b.HasKey("MesseinstellungID");

                    b.HasIndex("GesamtmessungID");

                    b.ToTable("Messeinstellung");
                });

            modelBuilder.Entity("TrenchAPI.Models.Sensor", b =>
                {
                    b.Property<int>("SensorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SensorID"));

                    b.Property<decimal>("Durchmesser")
                        .HasColumnType("decimal(8,3)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("Schenkel")
                        .HasColumnType("int");

                    b.Property<int>("SensorTypID")
                        .HasColumnType("integer");

                    b.HasKey("SensorID");

                    b.HasIndex("SensorTypID");

                    b.ToTable("Sensor");
                });

            modelBuilder.Entity("TrenchAPI.Models.SensorTyp", b =>
                {
                    b.Property<int>("SensorTypID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SensorTypID"));

                    b.Property<decimal>("Breite")
                        .HasColumnType("decimal(8,1)");

                    b.Property<decimal>("Höhe")
                        .HasColumnType("decimal(8,1)");

                    b.Property<int>("Wicklungszahl")
                        .HasColumnType("int");

                    b.HasKey("SensorTypID");

                    b.ToTable("SensorTyp");
                });

            modelBuilder.Entity("TrenchAPI.Models.Sensormessung", b =>
                {
                    b.Property<int>("SensormessungID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SensormessungID"));

                    b.Property<int>("GesamtmessungID")
                        .HasColumnType("int");

                    b.Property<int>("SensorId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Wert")
                        .HasColumnType("decimal(8,3)");

                    b.Property<DateTime>("Zeit")
                        .HasColumnType("timestamp");

                    b.HasKey("SensormessungID");

                    b.HasIndex("GesamtmessungID");

                    b.HasIndex("SensorId");

                    b.ToTable("Sensormessung");
                });

            modelBuilder.Entity("TrenchAPI.Models.Spule", b =>
                {
                    b.Property<int>("SpuleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SpuleID"));

                    b.Property<int>("AuftragsPosNr")
                        .HasColumnType("int");

                    b.Property<int>("Auftragsnummer")
                        .HasColumnType("int");

                    b.Property<int>("Einheit")
                        .HasColumnType("int");

                    b.Property<int>("SpuleTypID")
                        .HasColumnType("integer");

                    b.Property<decimal>("Ur")
                        .HasColumnType("decimal(8,3)");

                    b.Property<decimal>("omega")
                        .HasColumnType("decimal(8,5)");

                    b.HasKey("SpuleID");

                    b.HasIndex("SpuleTypID");

                    b.ToTable("Spule");
                });

            modelBuilder.Entity("TrenchAPI.Models.SpuleTyp", b =>
                {
                    b.Property<int>("SpuleTypID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SpuleTypID"));

                    b.Property<int>("BB")
                        .HasColumnType("int");

                    b.Property<int>("SH")
                        .HasColumnType("int");

                    b.Property<int>("Schenkel")
                        .HasColumnType("int");

                    b.Property<string>("TK_Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<int>("dm")
                        .HasColumnType("int");

                    b.HasKey("SpuleTypID");

                    b.ToTable("SpuleTyp");
                });

            modelBuilder.Entity("TrenchAPI.Models.Gesamtmessung", b =>
                {
                    b.HasOne("TrenchAPI.Models.Spule", "Spule")
                        .WithMany()
                        .HasForeignKey("SpuleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Spule");
                });

            modelBuilder.Entity("TrenchAPI.Models.Messeinstellung", b =>
                {
                    b.HasOne("TrenchAPI.Models.Gesamtmessung", "Gesamtmessung")
                        .WithMany()
                        .HasForeignKey("GesamtmessungID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gesamtmessung");
                });

            modelBuilder.Entity("TrenchAPI.Models.Sensor", b =>
                {
                    b.HasOne("TrenchAPI.Models.SensorTyp", "SensorTyp")
                        .WithMany()
                        .HasForeignKey("SensorTypID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SensorTyp");
                });

            modelBuilder.Entity("TrenchAPI.Models.Sensormessung", b =>
                {
                    b.HasOne("TrenchAPI.Models.Gesamtmessung", "Gesamtmessung")
                        .WithMany()
                        .HasForeignKey("GesamtmessungID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrenchAPI.Models.Sensor", "Sensor")
                        .WithMany()
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gesamtmessung");

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("TrenchAPI.Models.Spule", b =>
                {
                    b.HasOne("TrenchAPI.Models.SpuleTyp", "SpuleTyp")
                        .WithMany()
                        .HasForeignKey("SpuleTypID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SpuleTyp");
                });
#pragma warning restore 612, 618
        }
    }
}
